#pragma kernel AddDensity
#pragma kernel AddVelocity
#pragma kernel DensityAdvect
#pragma kernel VelocityAdvect 
#pragma kernel DensityDiffusion 
#pragma kernel ViscousDiffusion 
#pragma kernel Project0
#pragma kernel Project1
#pragma kernel Project2

// fluids parameters
Texture3D<float> DensityRead;
Texture3D<float> DensityTemp;
RWTexture3D<float> DensityWrite;
Texture3D<float4> VelocityRead;
Texture3D<float4> VelocityTemp;
RWTexture3D<float4> VelocityWrite;
RWTexture3D<float> p;
RWTexture3D<float> pTemp;
RWTexture3D<float> div;

SamplerState samplerDensityRead;
SamplerState samplerVelocityRead;

// other parameters
int gridWidth;
float dt;
float diff;
float visc;
float speed;

float3 ToUvw(uint3 id)
{
    return float3((id.x + 0.5) / (float) gridWidth, (id.y + 0.5) / (float) gridWidth, (id.z + 0.5) / (float) gridWidth);
}

void Set_Bnd(uint3 id)
{
}

[numthreads(4,4,4)]
void AddDensity(uint3 id : SV_DispatchThreadID)
{
    if (id.y == 2 && id.z > 61 && id.z < 67 && id.x > 61 && id.x < 67)
    {
        DensityWrite[id] = DensityRead[id] + 1;
    }
    else
    {
        DensityWrite[id] = DensityRead[id];
    }
}

[numthreads(4,4,4)]
void AddVelocity(uint3 id : SV_DispatchThreadID)
{
}

[numthreads(4,4,4)]
void DensityDiffusion(uint3 id : SV_DispatchThreadID)
{
    // run this 20 times
    // input d0, diff, dt, output d1
    if (id.x % gridWidth - 1 == 0){ return; }
    if (id.y % gridWidth - 1 == 0){ return; }
    if (id.z % gridWidth - 1 == 0){ return; }

    // idk why but this need to be small
    float a = dt * diff * 0.01;
    DensityWrite[id] = (DensityRead[id] + a * (
        DensityTemp[int3(id.x - 1, id.y, id.z)] +
        DensityTemp[int3(id.x + 1, id.y, id.z)] +
        DensityTemp[int3(id.x, id.y - 1, id.z)] +
        DensityTemp[int3(id.x, id.y + 1, id.z)] +
        DensityTemp[int3(id.x, id.y, id.z - 1)] +
        DensityTemp[int3(id.x, id.y, id.z + 1)]
        )) / (1 + 6 * a);
}

[numthreads(4,4,4)]
void ViscousDiffusion(uint3 id : SV_DispatchThreadID)
{
    // input d0, diff, dt, output d1
    if (id.x % gridWidth - 1 == 0){ return; }
    if (id.y % gridWidth - 1 == 0){ return; }
    if (id.z % gridWidth - 1 == 0){ return; }
    
    float a = dt * visc;
    VelocityWrite[id] = (VelocityRead[id] + a * (
        VelocityTemp[int3(id.x - 1, id.y, id.z)] +
        VelocityTemp[int3(id.x + 1, id.y, id.z)] +
        VelocityTemp[int3(id.x, id.y - 1, id.z)] +
        VelocityTemp[int3(id.x, id.y + 1, id.z)] +
        VelocityTemp[int3(id.x, id.y, id.z - 1)] +
        VelocityTemp[int3(id.x, id.y, id.z + 1)]
        )) / (1 + 6 * a);
}

[numthreads(4,4,4)]
void DensityAdvect(uint3 id : SV_DispatchThreadID)
{
    // input v, d0, dt, output d1
    // back trace in d0 with v/dt, sample trilinear
    float3 samplePos = float3(id.x, id.y, id.z) - float3(0,-1,0) * dt * speed;
    float3 uvw = ToUvw(samplePos);
    DensityWrite[id] = DensityRead.SampleLevel(samplerDensityRead, uvw, 0);
}

[numthreads(4,4,4)]
void VelocityAdvect(uint3 id : SV_DispatchThreadID)
{
    // input v, d0, dt, output d1
    // back trace in d0 with v/dt, sample trilinear
    float3 samplePos = float3(id.x, id.y, id.z) - VelocityRead[id].xyz * dt * speed;
    float3 uvw = ToUvw(samplePos);
    VelocityWrite[id] = VelocityRead.SampleLevel(samplerVelocityRead, uvw, 0);
}

[numthreads(4,4,4)]
void Project0(uint3 id : SV_DispatchThreadID)
{
    if (id.x % gridWidth - 1 == 0){ return; }
    if (id.y % gridWidth - 1 == 0){ return; }
    if (id.z % gridWidth - 1 == 0){ return; }
    
    int3 dx = float3(1,0,0);
    int3 dy = float3(0,1,0);
    int3 dz = float3(0,0,1);
    
    div[id] = 
        -(VelocityRead[id + dx].x - VelocityRead[id - dx].x +
            VelocityRead[id + dy].y - VelocityRead[id - dy].y +
                VelocityRead[id + dz].z - VelocityRead[id - dz].z);
        
    p[id] = 0;
}

[numthreads(4,4,4)]
void Project1(uint3 id : SV_DispatchThreadID)
{
    if (id.x % gridWidth - 1 == 0){ return; }
    if (id.y % gridWidth - 1 == 0){ return; }
    if (id.z % gridWidth - 1 == 0){ return; }
    
    int3 dx = float3(1,0,0);
    int3 dy = float3(0,1,0);
    int3 dz = float3(0,0,1);
    
    p[id] = (div[id] + p[id + dx] + p[id - dx] + p[id + dy] + p[id - dy] + p[id + dz] + p[id - dz]) / 6;
}

[numthreads(4,4,4)]
void Project2(uint3 id : SV_DispatchThreadID)
{
    if (id.x % gridWidth - 1 == 0){ return; }
    if (id.y % gridWidth - 1 == 0){ return; }
    if (id.z % gridWidth - 1 == 0){ return; }
    
    float3 v;
    int3 dx = float3(1,0,0);
    int3 dy = float3(0,1,0);
    int3 dz = float3(0,0,1);
    v.x = (p[id + dx] - p[id - dx]);
    v.y = (p[id + dy] - p[id - dy]);
    v.z = (p[id + dz] - p[id - dz]);
    VelocityWrite[id] -= float4(v, 0);
}


