#pragma kernel AddDensity
#pragma kernel AddVelocity
#pragma kernel DensityAdvect
#pragma kernel VelocityAdvect 
#pragma kernel DensityDiffusion 
#pragma kernel ViscousDiffusion 
#pragma kernel Project0
#pragma kernel Project1
#pragma kernel Project2

// fluids parameters
Texture3D<float> DensityRead;
Texture3D<float> DensityTemp;
RWTexture3D<float> DensityWrite;
Texture3D<float4> VelocityRead;
Texture3D<float4> VelocityTemp;
RWTexture3D<float4> VelocityWrite;
RWTexture3D<float> p;
RWTexture3D<float> div;

SamplerState samplerDensityRead;
SamplerState samplerVelocityRead;

// other parameters
int gridWidth;
float dt;
float diff;
float visc;
float speed;

float3 ToUvw(uint3 id)
{
    return float3(id.x / (float) gridWidth, id.y / (float) gridWidth, id.z / (float) gridWidth);
}

void Set_Bnd(uint3 id)
{
}

[numthreads(8,8,8)]
void AddDensity(uint3 id : SV_DispatchThreadID)
{
}

[numthreads(8,8,8)]
void AddVelocity(uint3 id : SV_DispatchThreadID)
{
}

[numthreads(8,8,8)]
void DensityDiffusion(uint3 id : SV_DispatchThreadID)
{
    // run this 20 times
    // input d0, diff, dt, output d1
    float a = dt * diff;
    DensityWrite[id] = (DensityRead[id] + a * (
        DensityTemp[int3(id.x - 1, id.y, id.z)] +
        DensityTemp[int3(id.x + 1, id.y, id.z)] +
        DensityTemp[int3(id.x, id.y - 1, id.z)] +
        DensityTemp[int3(id.x, id.y + 1, id.z)] +
        DensityTemp[int3(id.x, id.y, id.z - 1)] +
        DensityTemp[int3(id.x, id.y, id.z + 1)]
        )) / (1 + 6 * a);
}

[numthreads(8,8,8)]
void ViscousDiffusion(uint3 id : SV_DispatchThreadID)
{
    // run this 20 times
    // input d0, diff, dt, output d1
    float a = dt * visc;
    VelocityWrite[id] = (VelocityRead[id] + a * (
        VelocityTemp[int3(id.x - 1, id.y, id.z)] +
        VelocityTemp[int3(id.x + 1, id.y, id.z)] +
        VelocityTemp[int3(id.x, id.y - 1, id.z)] +
        VelocityTemp[int3(id.x, id.y + 1, id.z)] +
        VelocityTemp[int3(id.x, id.y, id.z - 1)] +
        VelocityTemp[int3(id.x, id.y, id.z + 1)]
        )) / (1 + 6 * a);
}

[numthreads(8,8,8)]
void DensityAdvect(uint3 id : SV_DispatchThreadID)
{
    // input v, d0, dt, output d1
    // back trace in d0 with v/dt, sample trilinear
    float3 samplePos = float3(id.x, id.y, id.z) - VelocityRead[id] * dt * speed;
    float3 uvw = ToUvw(samplePos);
    DensityWrite[id] = DensityRead.SampleLevel(samplerDensityRead, uvw, 0);
}

[numthreads(8,8,8)]
void VelocityAdvect(uint3 id : SV_DispatchThreadID)
{
    // input v, d0, dt, output d1
    // back trace in d0 with v/dt, sample trilinear
    float3 samplePos = float3(id.x, id.y, id.z) - VelocityRead[id] * dt * speed;
    float3 uvw = ToUvw(samplePos);
    VelocityWrite[id] = VelocityRead.SampleLevel(samplerVelocityRead, uvw, 0);
}

[numthreads(8,8,8)]
void Project0(uint3 id : SV_DispatchThreadID)
{
}

[numthreads(8,8,8)]
void Project1(uint3 id : SV_DispatchThreadID)
{
}

[numthreads(8,8,8)]
void Project2(uint3 id : SV_DispatchThreadID)
{
}


